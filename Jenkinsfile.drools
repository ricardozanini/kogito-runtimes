@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

helper = null

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g'
    }
    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    options {
        timeout(time: 360, unit: 'MINUTES')
    }

    environment {
        // Some generated env is also defined into .jenkins/dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
        MAVEN_OPTS = '-Xms1024m -Xmx4g'

    // Set into 'Initialize' stage
    // DROOLS_VERSION
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    helper = load '.jenkins/scripts/helper.groovy'

                    helper.checkoutDroolsRepo()

                    checkoutRepo(kogitoRuntimesRepo)
                    checkoutRepo(optaplannerRepo)
                    checkoutRepo(kogitoAppsRepo)
                    checkoutRepo(kogitoExamplesRepo)
                }
            }
        }
        stage('Retrieve drools snapshot version') {
            steps {
                script {
                    dir('drools') {
                        // query mvn to get the latest version
                        env.DROOLS_VERSION = """${sh (
                                script: 'mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout',
                                returnStdout: true
                            ).trim()}"""
                        assert env.DROOLS_VERSION != ''
                        echo "Latest kie7 version is: ${env.DROOLS_VERSION}"
                    }
                }
            }
        }
        stage('Build&Test Runtimes') {
            steps {
                script {
                    helper.runUnitTests(getMavenCommandWithDroolsVersion(kogitoRuntimesRepo))
                }
            }
        }
        stage('Build&Test OptaPlanner') {
            steps {
                script {
                    helper.runUnitTests(getMavenCommandWithDroolsVersion(optaplannerRepo))
                }
            }
        }
        stage('Build&Test Apps') {
            steps {
                script {
                    helper.runUnitTests(getMavenCommandWithDroolsVersion(kogitoAppsRepo))
                }
            }
        }
        stage('Build&Test Examples') {
            steps {
                script {
                    helper.runUnitTests(getMavenCommandWithDroolsVersion(kogitoExamplesRepo))
                }
            }
        }

        stage('Run Runtimes integration-tests') {
            steps {
                script {
                    helper.runIntegrationTests(getMavenCommandWithDroolsVersion(kogitoRuntimesRepo))
                }
            }
        }

        stage('Run Runtimes integration-tests with persistence') {
            steps {
                script {
                    helper.runIntegrationTests(getMavenCommandWithDroolsVersion(kogitoRuntimesRepo), ['persistence'])
                }
            }
        }

        stage('Run Apps integration-tests') {
            steps {
                script {
                    helper.runIntegrationTests(getMavenCommandWithDroolsVersion(kogitoAppsRepo))
                }
            }
        }

        stage('Run Apps integration-tests with persistence') {
            steps {
                script {
                    helper.runIntegrationTests(getMavenCommandWithDroolsVersion(kogitoAppsRepo), ['persistence'])
                }
            }
        }

        stage('Run Apps integration-tests with events') {
            steps {
                script {
                    helper.runIntegrationTests(getMavenCommandWithDroolsVersion(kogitoAppsRepo), ['events'])
                }
            }
        }

        stage('Run Examples integration-tests') {
            steps {
                script {
                    helper.runIntegrationTests(getMavenCommandWithDroolsVersion(kogitoExamplesRepo))
                }
            }
        }

        stage('Run Examples integration-tests with persistence') {
            steps {
                script {
                    helper.runIntegrationTests(getMavenCommandWithDroolsVersion(kogitoExamplesRepo), ['persistence'])
                }
            }
        }

        stage('Run Examples integration-tests with events') {
            steps {
                script {
                    helper.runIntegrationTests(getMavenCommandWithDroolsVersion(kogitoExamplesRepo), ['events'])
                }
            }
        }
    }
    post {
        unsuccessful {
            helper.sendNotification('Runtimes Drools snapshot')
        }
        cleanup {
            script {
                util.cleanNode('docker')
            }
        }
    }
}

void checkoutRepo(String repo) {
    if (repo == optaplannerRepo) {
        helper.checkoutRepo(repo, params.GIT_AUTHOR, helper.getOptaplannerReleaseBranch(params.BUILD_BRANCH_NAME))
    } else {
        helper.checkoutRepo(repo, params.GIT_AUTHOR, params.BUILD_BRANCH_NAME)
    }
}

MavenCommand getMavenCommandWithDroolsVersion(String project) {
    return helper.getMavenCommand(project)
                .withProperty('version.org.kie7', "${DROOLS_VERSION}")
}
