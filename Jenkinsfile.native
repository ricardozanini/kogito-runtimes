@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

helper = null

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g'
    }
    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    options {
        timeout(time: 360, unit: 'MINUTES')
    }
    environment {
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    helper = load '.jenkins/scripts/helper.groovy'

                    checkoutRepo(kogitoRuntimesRepo)
                    checkoutRepo(optaplannerRepo)
                    checkoutRepo(kogitoAppsRepo)
                    checkoutRepo(kogitoExamplesRepo)
                }
            }
        }
        stage('Build&Test Runtimes') {
            steps {
                script {
                    helper.runUnitTests(getNativeMavenCommand(kogitoRuntimesRepo))
                }
            }
        }
        stage('Build&Test OptaPlanner') {
            steps {
                script {
                    helper.runUnitTests(getNativeMavenCommand(optaplannerRepo))
                }
            }
        }
        stage('Build&Test Apps') {
            steps {
                script {
                    helper.runUnitTests(getNativeMavenCommand(kogitoAppsRepo))
                }
            }
        }
        stage('Build&Test Examples') {
            steps {
                script {
                    helper.runUnitTests(getNativeMavenCommand(kogitoExamplesRepo))
                }
            }
        }

        stage('Run Runtimes integration-tests') {
            steps {
                script {
                    helper.runIntegrationTests(getNativeMavenCommand(kogitoRuntimesRepo))
                }
            }
        }

        stage('Run Runtimes integration-tests with persistence') {
            steps {
                script {
                    helper.runIntegrationTests(getNativeMavenCommand(kogitoRuntimesRepo), ['persistence'])
                }
            }
        }

        stage('Run Apps integration-tests') {
            steps {
                script {
                    helper.runIntegrationTests(getNativeMavenCommand(kogitoAppsRepo))
                }
            }
        }

        stage('Run Apps integration-tests with persistence') {
            steps {
                script {
                    helper.runIntegrationTests(getNativeMavenCommand(kogitoAppsRepo), ['persistence'])
                }
            }
        }

        stage('Run Apps integration-tests with events') {
            steps {
                script {
                    helper.runIntegrationTests(getNativeMavenCommand(kogitoAppsRepo), ['events'])
                }
            }
        }

        stage('Run Examples integration-tests') {
            steps {
                script {
                    helper.runIntegrationTests(getNativeMavenCommand(kogitoExamplesRepo))
                }
            }
        }

        stage('Run Examples integration-tests with persistence') {
            steps {
                script {
                    helper.runIntegrationTests(getNativeMavenCommand(kogitoExamplesRepo), ['persistence'])
                }
            }
        }

        stage('Run Examples integration-tests with events') {
            steps {
                script {
                    helper.runIntegrationTests(getNativeMavenCommand(kogitoExamplesRepo), ['events'])
                }
            }
        }
    }
    post {
        unsuccessful {
            helper.sendNotification('Runtimes Native')
        }
        cleanup {
            script {
                util.cleanNode('docker')
            }
        }
    }
}

void checkoutRepo(String repo) {
    if (repo == optaplannerRepo) {
        helper.checkoutRepo(repo, params.GIT_AUTHOR, helper.getOptaplannerReleaseBranch(params.BUILD_BRANCH_NAME))
    } else {
        helper.checkoutRepo(repo, params.GIT_AUTHOR, params.BUILD_BRANCH_NAME)
    }
}

MavenCommand getNativeMavenCommand(String directory) {
    return helper.getMavenCommand(directory, false, true)
}
